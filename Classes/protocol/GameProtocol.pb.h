// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.proto

#ifndef PROTOBUF_GameProtocol_2eproto__INCLUDED
#define PROTOBUF_GameProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace qiyi {
namespace forever {
namespace master {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameProtocol_2eproto();
void protobuf_AssignDesc_GameProtocol_2eproto();
void protobuf_ShutdownFile_GameProtocol_2eproto();

class AccountCreateRequest;
class AccountCreateResponse;
class LoginRequest;
class LoginResponse;

enum Opration {
  ACCOUNT_CREAT = 1,
  LOGIN = 2
};
bool Opration_IsValid(int value);
const Opration Opration_MIN = ACCOUNT_CREAT;
const Opration Opration_MAX = LOGIN;
const int Opration_ARRAYSIZE = Opration_MAX + 1;

const ::google::protobuf::EnumDescriptor* Opration_descriptor();
inline const ::std::string& Opration_Name(Opration value) {
  return ::google::protobuf::internal::NameOfEnum(
    Opration_descriptor(), value);
}
inline bool Opration_Parse(
    const ::std::string& name, Opration* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Opration>(
    Opration_descriptor(), name, value);
}
// ===================================================================

class AccountCreateRequest : public ::google::protobuf::Message {
 public:
  AccountCreateRequest();
  virtual ~AccountCreateRequest();

  AccountCreateRequest(const AccountCreateRequest& from);

  inline AccountCreateRequest& operator=(const AccountCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountCreateRequest& default_instance();

  void Swap(AccountCreateRequest* other);

  // implements Message ----------------------------------------------

  AccountCreateRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = ACCOUNT_CREAT];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::com::qiyi::forever::master::protobuf::Opration opt() const;
  inline void set_opt(::com::qiyi::forever::master::protobuf::Opration value);

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:com.qiyi.forever.master.protobuf.AccountCreateRequest)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  int opt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eproto();

  void InitAsDefaultInstance();
  static AccountCreateRequest* default_instance_;
};
// -------------------------------------------------------------------

class AccountCreateResponse : public ::google::protobuf::Message {
 public:
  AccountCreateResponse();
  virtual ~AccountCreateResponse();

  AccountCreateResponse(const AccountCreateResponse& from);

  inline AccountCreateResponse& operator=(const AccountCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountCreateResponse& default_instance();

  void Swap(AccountCreateResponse* other);

  // implements Message ----------------------------------------------

  AccountCreateResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = ACCOUNT_CREAT];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::com::qiyi::forever::master::protobuf::Opration opt() const;
  inline void set_opt(::com::qiyi::forever::master::protobuf::Opration value);

  // required int32 errorCode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:com.qiyi.forever.master.protobuf.AccountCreateResponse)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int opt_;
  ::google::protobuf::int32 errorcode_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eproto();

  void InitAsDefaultInstance();
  static AccountCreateResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = LOGIN];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::com::qiyi::forever::master::protobuf::Opration opt() const;
  inline void set_opt(::com::qiyi::forever::master::protobuf::Opration value);

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:com.qiyi.forever.master.protobuf.LoginRequest)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  int opt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = LOGIN];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::com::qiyi::forever::master::protobuf::Opration opt() const;
  inline void set_opt(::com::qiyi::forever::master::protobuf::Opration value);

  // required int32 errorCode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:com.qiyi.forever.master.protobuf.LoginResponse)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int opt_;
  ::google::protobuf::int32 errorcode_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountCreateRequest

// optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = ACCOUNT_CREAT];
inline bool AccountCreateRequest::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountCreateRequest::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountCreateRequest::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountCreateRequest::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::com::qiyi::forever::master::protobuf::Opration AccountCreateRequest::opt() const {
  return static_cast< ::com::qiyi::forever::master::protobuf::Opration >(opt_);
}
inline void AccountCreateRequest::set_opt(::com::qiyi::forever::master::protobuf::Opration value) {
  assert(::com::qiyi::forever::master::protobuf::Opration_IsValid(value));
  set_has_opt();
  opt_ = value;
}

// required string username = 2;
inline bool AccountCreateRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountCreateRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountCreateRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountCreateRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& AccountCreateRequest::username() const {
  return *username_;
}
inline void AccountCreateRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AccountCreateRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AccountCreateRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountCreateRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* AccountCreateRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountCreateRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 3;
inline bool AccountCreateRequest::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountCreateRequest::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountCreateRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountCreateRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& AccountCreateRequest::password() const {
  return *password_;
}
inline void AccountCreateRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountCreateRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountCreateRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountCreateRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* AccountCreateRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountCreateRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountCreateResponse

// optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = ACCOUNT_CREAT];
inline bool AccountCreateResponse::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountCreateResponse::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountCreateResponse::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountCreateResponse::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::com::qiyi::forever::master::protobuf::Opration AccountCreateResponse::opt() const {
  return static_cast< ::com::qiyi::forever::master::protobuf::Opration >(opt_);
}
inline void AccountCreateResponse::set_opt(::com::qiyi::forever::master::protobuf::Opration value) {
  assert(::com::qiyi::forever::master::protobuf::Opration_IsValid(value));
  set_has_opt();
  opt_ = value;
}

// required int32 errorCode = 2;
inline bool AccountCreateResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountCreateResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountCreateResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountCreateResponse::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 AccountCreateResponse::errorcode() const {
  return errorcode_;
}
inline void AccountCreateResponse::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// required string msg = 3;
inline bool AccountCreateResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountCreateResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountCreateResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountCreateResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& AccountCreateResponse::msg() const {
  return *msg_;
}
inline void AccountCreateResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void AccountCreateResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void AccountCreateResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountCreateResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* AccountCreateResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountCreateResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRequest

// optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = LOGIN];
inline bool LoginRequest::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_opt() {
  opt_ = 2;
  clear_has_opt();
}
inline ::com::qiyi::forever::master::protobuf::Opration LoginRequest::opt() const {
  return static_cast< ::com::qiyi::forever::master::protobuf::Opration >(opt_);
}
inline void LoginRequest::set_opt(::com::qiyi::forever::master::protobuf::Opration value) {
  assert(::com::qiyi::forever::master::protobuf::Opration_IsValid(value));
  set_has_opt();
  opt_ = value;
}

// required string username = 2;
inline bool LoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRequest::username() const {
  return *username_;
}
inline void LoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 3;
inline bool LoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginRequest::password() const {
  return *password_;
}
inline void LoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginResponse

// optional .com.qiyi.forever.master.protobuf.Opration opt = 1 [default = LOGIN];
inline bool LoginResponse::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_opt() {
  opt_ = 2;
  clear_has_opt();
}
inline ::com::qiyi::forever::master::protobuf::Opration LoginResponse::opt() const {
  return static_cast< ::com::qiyi::forever::master::protobuf::Opration >(opt_);
}
inline void LoginResponse::set_opt(::com::qiyi::forever::master::protobuf::Opration value) {
  assert(::com::qiyi::forever::master::protobuf::Opration_IsValid(value));
  set_has_opt();
  opt_ = value;
}

// required int32 errorCode = 2;
inline bool LoginResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 LoginResponse::errorcode() const {
  return errorcode_;
}
inline void LoginResponse::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// required string msg = 3;
inline bool LoginResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& LoginResponse::msg() const {
  return *msg_;
}
inline void LoginResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void LoginResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void LoginResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* LoginResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace master
}  // namespace forever
}  // namespace qiyi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::qiyi::forever::master::protobuf::Opration>() {
  return ::com::qiyi::forever::master::protobuf::Opration_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameProtocol_2eproto__INCLUDED
